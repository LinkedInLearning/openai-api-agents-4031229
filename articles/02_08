# Testing the agent workflow and checking the traces

Note: If you have not done the hands-on exercises, the starting branch for this article is `02_08_b`:

```bash
git checkout 02_08_b
```

When you build out your agent workflows it's good practice to test the workflow whenever all the loops are closed and the flow should work. That way you'll catch any errors early and maybe even find opportunities you were not aware of.

At this point the new sub-agent is successfully integrated in the workflow and it's time to test it to make sure everything works.

## Setting up dummy data

When this agent workflow is deployed, it'll receive a data object on invocation that looks like this:

```python
query = TripQuery(
    start_date="2025-06-05",
    end_date="2025-07-14",
    location="Amsterdam",
    participant_number=2,
    participant_ages=[32, 35]
)
```

For testing purposes, the `main.py` file has this pre-configured query set up. You can change the values in this data to any future dates, any location, any participant number, and any participant dates to test different scenarios.

## Running the agent workflow

Follow these steps to run the agent workflow:

### Local installs only (not Codespaces)

On local installs it is recommended to set up a virtual environmnet so you're not installing dependencies and keys globally. Your virtual environment should run Python 3.13 or later.

```bash
# From the root folder
# Create a new virtual environment using venv
python3.13 -m venv .venv

# Activate the virtual environment
source .venv/bin/activate

# To deactivate the virtual environment at any time
deactivate
```

### 1. Make sure all required dependencies are installed

```bash
pip install -r requirements.txt
```

### 2. Add your OpenAI API key

You need an OpenAI API key to run the Agents SDK and hook into the Tracing. Get your key at [https://platform.openai.com/api-keys](https://platform.openai.com/api-keys)

Install the key into your environment:

```bash
export OPENAI_API_KEY=<your-key-here>
```

### 3. Run the agent workflow

```bash
# From the root folder
python -m adventurebot.main
```

## Viewing the Trace

All your agent workflows are traced unless you explicitly block tracing. When the workflow runs, the Trace ID and a link to view your trace will print in the terminal like this:

```bash
Starting adventure planning... (Trace ID: trace_8...)
View trace: https://platform.openai.com/traces/trace?trace_id=trace_8...)
```

To view the trace, follow the link. If you're not already logged in to the OpenAI platform, you'll be prompted to do so.

Note: The trace exapnds as the workflow runs, and you may have to click the reload button to see updates.

## Terminal Output and agent workflow result

As the agent workflow runs, you'll see each sub-agent and process declared in the terminal like this:

```bash
Initializing and connecting to Weather MCP server...
Weather MCP server connected. Creating Weather Agent...
Fetching weather information using Weather Agent...
Weather information fetched.
Weather MCP server disconnected.
Searching for activities (checking for kid-friendly handoff)...
Handoff occurred: Activities found by Kid-Friendly Activity Agent.
Evaluating activities and creating trip plan...
```

Depending on factors including your location and dates, participant number, model choice, internet speed, and other factors, this may take some time so be patient!

Once the workflow is complete you get the message `Trip plan generated.` followed by a fully printed out trip plan.

Review the plan to make sure all elements are present and that everything makes sense, and review the Trace to see how the data flowed through the agents.

## Further testing

This agent workflow has different workflows depending on your input so it's necessary to test them all.

The different scenarios to test are:

1. All participants are over 12 years old
2. One or more participants are under 12 years old
3. Start and end date within 10 days of today's date
4. Start and end date more than 10 days from today's date

Change the test query in `main.py` to run each of these scenarios and you'll see the output in terminal and the traces change accordingly.

## Going further

Now that you have the workflow fully built out, consider how you would change the flow by modifying input and output data, changing agent behaviour, etc.

For some inspiration, check out the example provided under the `./adventurebot_advanced/` folder and the many examples provided in the [OpenAI Agents SDK GitHub repo](https://github.com/openai/openai-agents-python).
